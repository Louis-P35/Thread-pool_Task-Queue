cmake_minimum_required(VERSION 3.15)

# Variable for the project name
set(PROJECT_NAME "Thread_Pool")

# Variable for the library name
set(LIB_NAME "${PROJECT_NAME}Lib")

# Set project name and version
project(${PROJECT_NAME}
        VERSION 1.0.0
        LANGUAGES CXX)

# Set default build type if none was specified
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the build type: Debug, Release, RelWithDebInfo, MinSizeRel" FORCE)
endif()

# Set C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Enable folders in IDEs like Visual Studio
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Add custom cmake modules
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

# Options
option(BUILD_TESTS "Build unit tests" OFF)
option(BUILD_DOCS "Build documentation" OFF)


# Add the main library or executable sources from src/
add_subdirectory(src)

# Add unit tests if enabled
if(BUILD_TESTS)
    enable_testing()
    add_subdirectory(tests)
endif()

# Add documentation generation if applicable
if(BUILD_DOCS)
    # Typically handled with Doxygen or similar
    # add_subdirectory(docs)
endif()

# Include directories for all targets
# Typically, headers are in include/
include_directories(${CMAKE_SOURCE_DIR}/include)

# Add thirdParty folder for external dependencies
# add_subdirectory(thirdParty)

# Print some info for CI/CD logs
message(STATUS "Project: ${PROJECT_NAME}")
message(STATUS "Version: ${PROJECT_VERSION}")
message(STATUS "C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "Build Tests: ${BUILD_TESTS}")
message(STATUS "Build Docs: ${BUILD_DOCS}")
